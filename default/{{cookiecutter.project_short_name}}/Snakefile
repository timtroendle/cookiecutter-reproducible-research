from snakemake.utils import min_version
from pathlib import Path
import requests
PANDOC = "pandoc --filter pantable --filter pandoc-crossref --citeproc -f markdown+mark"

configfile: "config/default.yaml"
{% if cookiecutter._add_cluster_infrastructure == True %}
include: "./rules/sync.smk"

SNAKEMAKE_LOG_DIR = Path(".snakemake/log")
SLURM_LOG_DIR = Path(".snakemake/slurm_logs")
SNAKEMAKE_LOG_PUBLISH_DIR = Path("build/logs/snakemake")
SLURM_LOG_PUBLISH_DIR = Path("build/logs/slurm")

{% endif %}
min_version("9.6")

{% if cookiecutter._add_cluster_infrastructure == True %}
onstart:
    prepare_log_directories()
{% endif %}
onsuccess:
    if "pushcut_secret" in config.keys():
        trigger_pushcut(event_name="snakemake_succeeded", secret=config["pushcut_secret"])
onerror:
    if "pushcut_secret" in config.keys():
        trigger_pushcut(event_name="snakemake_failed", secret=config["pushcut_secret"])


rule all:
    message: "Run entire analysis and compile report."
    {% if cookiecutter._add_cluster_infrastructure == True %}
    localrule: True
    {% endif %}
    input:
        "build/report.html",
        "build/report.pdf",
        "build/test.success"


rule run:
    message: "Runs the demo model."
    params:
        slope = config["slope"],
        x0 = config["x0"]
    output: "build/results.pickle"
    conda: "envs/default.yaml"
    script: "scripts/model.py"


rule plot:
    message: "Visualises the demo results."
    input:
        results = rules.run.output
    output: "build/plot.png"
    conda: "envs/default.yaml"
    script: "scripts/vis.py"


def pandoc_options(wildcards):
    suffix = wildcards["suffix"]
    if suffix == "html":
        return "--embed-resources --standalone --to html5 --mathml"
    elif suffix == "pdf":
        return "--pdf-engine weasyprint --lua-filter='../scripts/math/math-katex.lua'"
    elif suffix == "docx":
        return []
    else:
        raise ValueError(f"Cannot create report with suffix {suffix}.")


rule report:
    message: "Compile report.{wildcards.suffix}."
    input:
        "report/literature.yaml",
        "report/report.md",
        "report/pandoc-metadata.yaml",
        "report/apa.csl",
        "report/reset.css",
        "report/report.css",
        "scripts/math/math-katex.lua",
        rules.plot.output
    params: options = pandoc_options
    output: "build/report.{suffix}"
    wildcard_constraints:
        suffix = "((html)|(pdf)|(docx))"
    conda: "envs/report.yaml"
    shadow: "minimal"
    shell:
        """
        cd report
        ln -s ../build .
        {PANDOC} report.md  --metadata-file=pandoc-metadata.yaml {params.options} \
        -o ../build/report.{wildcards.suffix}
        """


rule dag_dot:
    {% if cookiecutter._add_cluster_infrastructure == True %}
    localrule: True
    {% endif %}
    output: temp("build/dag.dot")
    shell:
        "snakemake --rulegraph > {output}"


rule dag:
    message: "Plot dependency graph of the workflow."
    {% if cookiecutter._add_cluster_infrastructure == True %}
    localrule: True
    {% endif %}
    input: rules.dag_dot.output[0]
    # Output is deliberately omitted so rule is executed each time.
    conda: "envs/dag.yaml"
    shell:
        "dot -Tpdf {input} -o build/dag.pdf"


rule clean: # removes all generated results
    message: "Remove all build results but keep downloaded data."
    {% if cookiecutter._add_cluster_infrastructure == True %}
    localrule: True
    {% endif %}
    run:
         import shutil

         shutil.rmtree("build")
         print("Data downloaded to data/ has not been cleaned.")


rule archive:
    message: "Package, zip, and move entire build."
    params:
        push_from_directory = config["push"]["from"],
        push_to_directory = config["push"]["to"],
        exclude_paths = config["push"]["exclude-paths"]
    run:
        from datetime import datetime
        from pathlib import Path
        import tarfile

        today = datetime.today().strftime('%Y-%m-%d')
        from_folder = Path(params.push_from_directory)
        to_folder = Path(params.push_to_directory).expanduser()
        build_archive_filename = to_folder / f"{{ cookiecutter.project_short_name }}-{today}.gz"

        to_folder.mkdir(parents=True, exist_ok=True)
        assert to_folder.is_dir(), f"Archive folder {to_folder} does not exist."

        exclude_paths = params.exclude_paths if params.exclude_paths else []

        with tarfile.open(build_archive_filename, "w:gz") as tar:
            tar.add(from_folder, filter=lambda x: None if x.name in exclude_paths else x)


rule test:
    # To add more tests, do
    # (1) Add to-be-tested workflow outputs as inputs to this rule.
    # (2) Turn them into pytest fixtures in tests/test_runner.py.
    # (3) Create or reuse a test file in tests/my-test.py and use fixtures in tests.
    message: "Run tests"
    input:
        test_dir = "tests",
        tests = map(str, Path("tests").glob("**/test_*.py")),
        model_results = rules.run.output[0],
    log: "build/test-report.html"
    output: "build/test.success"
    conda: "./envs/test.yaml"
    script: "./tests/test_runner.py"


def trigger_pushcut(event_name: str, secret: str) -> None:
    """Trigger a Pushcut notification."""
    response = requests.post(
            f'https://api.pushcut.io/{secret}/notifications/{event_name}'
    )
    response.raise_for_status()


{% if cookiecutter._add_cluster_infrastructure == True %}
def prepare_log_directories() -> None:
    """Create symlinks to Snakemake log directories."""
    if SLURM_LOG_DIR.resolve().exists() and not SLURM_LOG_PUBLISH_DIR.resolve().exists():
        SLURM_LOG_PUBLISH_DIR.parent.mkdir(parents=True, exist_ok=True)
        SLURM_LOG_PUBLISH_DIR.symlink_to(SLURM_LOG_DIR.resolve())
    if SNAKEMAKE_LOG_DIR.resolve().exists() and not SNAKEMAKE_LOG_PUBLISH_DIR.resolve().exists():
        SNAKEMAKE_LOG_PUBLISH_DIR.parent.mkdir(parents=True, exist_ok=True)
        SNAKEMAKE_LOG_PUBLISH_DIR.symlink_to(SNAKEMAKE_LOG_DIR.resolve())
{% endif %}
